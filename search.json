[{"title":"BurpSuite 插件编写 - 创建选项卡","url":"/2019/09/05/BurpSuite-插件编写-创建标签/","content":"\n>   有时候，单纯的事件监听并不能满足我们的需求。\n\n创建选项卡需要使用的库：\n\n-   ITab\n-   Java swing 库\n\n# ITab\n\nITab只含有两个方法：\n\n## getTabCaption\n\n用于获取选项卡上的标题\n\n![1567670294670](BurpSuite-插件编写-创建标签/1567670294670.png)\n\n```python\ndef getTabCaption(self):\n    # Get title of Tab\n    return 'createTab'\n```\n\n## getUiComponent\n\n用于获取选项卡中的组件（面板）\n\n```python\ndef getUiComponent(self):\n    # get component of tab\n    return self.mainPanel\n```\n\n# swing\n\nJava 中的swing库，用来编写GUI界面。[相关教程1](https://www.runoob.com/w3cnote/java-swing-demo-intro.html)，[相关教程2](http://c.biancheng.net/swing/)\n\n# 代码\n\n```python\n# -*- coding: utf-8 -*-\n# Author: zr0sky (i@zr0sky.cn)\n# Blog: blog.zr0sky.cn\n\n\n# 导入相关库\nfrom burp import IBurpExtender, ITab\nfrom javax.swing import JPanel, JButton, JTextArea\n\nclass BurpExtender(IBurpExtender, ITab):\n\n    def registerExtenderCallbacks(self, callbacks):\n        \n        self._cb = callbacks\n        self._hp = callbacks.getHelpers()\n        self._cb.setExtensionName('newTab')\n\n        self.mainPanel = JPanel() # 创建一个面板，能容纳组件并将组件组合在一起\n\n        self.testTextArea = JTextArea() # 创建一个文本框\n        self.testTextArea.setLineWrap(True) # 设置文本框为自动换行\n\n        self.testBtn = JButton(\"Click me\", actionPerformed=self.onClick)  # 创建一个按钮并绑定事件\n\n        self.mainPanel.add(self.testTextArea)    # 将组件添加到面板中\n        self.mainPanel.add(self.testBtn)\n\n        self._cb.customizeUiComponent(self.mainPanel)\n        self._cb.addSuiteTab(self)\n        \n    def onClick(self, event):\n        print '1111'\n\n    def getTabCaption(self):\n        # Get title of Tab\n        return 'createTab'\n\n    def getUiComponent(self):\n        # get component of tab\n        return self.mainPanel\n\n```\n\n\n\n![1567682752092](BurpSuite-插件编写-创建标签/1567682752092.png)\n\n\n\n\n\n\n\n","tags":["BurpSuite","Python"],"categories":["Python","BurpSuite 插件"]},{"title":"BurpSuite 插件编写 - 事件监听","url":"/2019/09/03/BurpSuite-插件编写-事件监听/","content":"\n# 事件监听相关的库\n\n## IHttpListener\n\nHTTP的监听器拓展库，监听所有Burp发出的请求和响应。\n\n可调用`IBurpExtenderCallbacks.registerHttpListener()` 来注册HTTP监听器。通过`processHttpMessage`方法来处理HTTP请求或响应。\n\n```python\nvoid processHttpMessage(int toolFlag,\n                      boolean messageIsRequest,\n                      IHttpRequestResponse messageInfo)\n```\n\n`toolFlag`：发出请求的工具标志, 如: TOOL_PROXY 标志就代表数据是从Proxy发出\n\n![1567518683382](BurpSuite-插件编写-事件监听/1567518683382.png)\n\n`messageIsRequest`：是否为请求包\n\n`messageInfo`：要处理的请求/响应的详细信息。扩展可以调用此对象上的setter方法来更新当前消息，从而修改burp的行为。对象所包含的方法[详见](https://portswigger.net/burp/extender/api/burp/IHttpRequestResponse.html)\n\n```python\nfrom burp import IBurpExtender\nfrom burp import IHttpListener\nfrom java.io import PrintWriter\n\nclass BurpExtender(IBurpExtender, IHttpListener):\n    \n    #\n    # implement IBurpExtender\n    #\n    \n    def\tregisterExtenderCallbacks(self, callbacks):\n        self._callbacks = callbacks\n        \n        callbacks.setExtensionName(\"Event listeners\")\n        \n        self._stdout = PrintWriter(callbacks.getStdout(), True)\n        # 注册HTTP监听器\n        callbacks.registerHttpListener(self)\n    \n    #\n    # implement IHttpListener\n    #\n\n    def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo):\n        # 将信息输出到 输出流中去\n        self._stdout.println(\n                (\"HTTP request to \" if messageIsRequest else \"HTTP response from \") +\n                messageInfo.getHttpService().toString() +\n                \" [\" + self._callbacks.getToolName(toolFlag) + \"]\")\n\n\n```\n\n## IProxyListener\n\n注册Proxy侦听器，只监听Proxy工具处的请求和响应。然后调用`IBurpExtenderCallbacks.RegisterProxyListener()`注册Proxy侦听器，通过`processProxyMessage`方法来处理请求或响应\n\n```python\nfrom burp import IBurpExtender\nfrom burp import IProxyListener\nfrom java.io import PrintWriter\n\nclass BurpExtender(IBurpExtender, IProxyListener):\n    \n    #\n    # implement IBurpExtender\n    #\n    \n    def\tregisterExtenderCallbacks(self, callbacks):\n        self._callbacks = callbacks\n        \n        callbacks.setExtensionName(\"Event listeners\")\n        \n        self._stdout = PrintWriter(callbacks.getStdout(), True)\n        # 注册HTTP监听器\n        callbacks.RegisterProxyListener(self)\n    \n    #\n    # implement IProxyListener\n    #\n\n    def processProxyMessage(self, messageIsRequest, message):\n        self._stdout.println(\n                (\"Proxy request to \" if messageIsRequest else \"Proxy response from \") +\n                message.getMessageInfo().getHttpService().toString())\n\n\n```\n\n## IScannerListener\n\n注册Scanner 侦听器，只监听Scanner 工具处的issues。然后调用`IBurpExtenderCallbacks.registerScannerListener()`注册Scanner侦听器，通过`newScanIssue`方法来处理，其含有一个参数`IScanIssue`类型的`issue`，[具体详见](https://portswigger.net/burp/extender/api/burp/IScanIssue.html)\n\n```python\nfrom burp import IBurpExtender\nfrom burp import IScannerListener\nfrom java.io import PrintWriter\n\nclass BurpExtender(IBurpExtender, IScannerListener):\n\n    #\n    # implement IBurpExtender\n    #\n    \n    def registerExtenderCallbacks(self, callbacks):\n        # keep a reference to our callbacks object\n        self._callbacks = callbacks\n        \n        # set our extension name\n        callbacks.setExtensionName(\"Event listeners\")\n        \n        # obtain our output stream\n        self._stdout = PrintWriter(callbacks.getStdout(), True)\n\n        # register ourselves as a Scanner listener\n        callbacks.registerScannerListener(self)\n        \n    def newScanIssue(self, issue):\n        self._stdout.println(\"New scan issue: \" + issue.getIssueName())\n```\n\n\n\n## IExtensionStateListener\n\n注册扩展状态侦听器。将通知侦听器扩展状态的更改。调用`IBurpExtenderCallbacks.RegisterExtensionStateListener()`注册。`extensionUnloaded()`方法来处理。**无参数**\n\n**注意**：任何启动后台线程或打开系统资源（如文件或数据库连接）的扩展都应该注册一个侦听器，并在卸载扩展时终止线程/关闭资源。**关闭Burp时也会卸载扩展**\n\n```python\ndef extensionUnloaded(self):\n    self._stdout.println(\"Extension was unloaded\")\n```\n\n## IScopeChangeListener\n\n调用`IBurpExtenderCallbacks.RegisterScopechAngelistener()`注册scope更改侦听器。每当Burp的scope内的目标范围发生更改时，都会通知侦听器。使用`scopeChanged()`方法来处理，**无参数**\n\n","tags":["BurpSuite","Python"],"categories":["Python","BurpSuite 插件"]},{"title":"BurpSuite 插件编写 - Hello World","url":"/2019/09/03/BurpSuite-插件编写-Hello-World/","content":"\n# 0x00 前言\n\nBurpSuite是渗透过程中的一大神器，几乎必不可少。而必要的插件可以使我们事半功倍。虽然Burp中已经有很多优秀的插件供我们使用，但有些情况下我们可以根据自己的需要定制自己的插件。\n\n## 前提准备\n\n### Burp Suite\n\n这个就不说了\n\n### Jython\n\nJython 是Burp 支持Python 的必要插件。[下载官网](https://www.jython.org/)\n\n![1567486883062](BurpSuite-插件编写-Hello-World/1567486883062.png)\n\n设置Jython路径\n\n![1567486935814](BurpSuite-插件编写-Hello-World/1567486935814.png)\n\n### Python2\n\nJython 目前只支持Python2\n\n\n\n# 0x01 插件编写\n\n插件API的文档地址：[Generated Documentation](https://portswigger.net/burp/extender/api/index.html)\n\n![1567487134501](BurpSuite-插件编写-Hello-World/1567487134501.png)\n\n里面有详细的介绍\n\n## 常用的库\n\n```Python\nfrom burp import IBurpExtender  # Burp 插件入口\nfrom burp import IBurpExtenderCallbacks # IBurpExtender接口的实现类\nfrom burp import IHttpListener # 会接收所有通过 BurpSuite 的请求与响应包\nfrom burp import IProxyListener  # 只接收所有通过Proxy工具的请求与响应包\nfrom burp import IHttpRequestResponse #此接口用于检索和更新有关http消息的详细信息\n```\n\n## 例程\n\n使用官方例程来了解插件的基础构成，地址：[Hello World](https://github.com/PortSwigger/example-hello-world/blob/master/python/HelloWorld.py)\n\n```python\nfrom burp import IBurpExtender\nfrom java.io import PrintWriter\nfrom java.lang import RuntimeException\n\nclass BurpExtender(IBurpExtender):\n\n    #\n    # implement IBurpExtender\n    #\n\n    def registerExtenderCallbacks(self, callbacks):\n        # set our extension name\n        callbacks.setExtensionName(\"Hello world extension\")\n\n        # obtain our output and error streams\n        stdout = PrintWriter(callbacks.getStdout(), True)\n        stderr = PrintWriter(callbacks.getStderr(), True)\n\n        # write a message to our output stream\n        stdout.println(\"Hello output\")\n\n        # write a message to our error stream\n        stderr.println(\"Hello errors\")\n\n        # write a message to the Burp alerts tab\n        callbacks.issueAlert(\"Hello alerts\")\n\n        # throw an exception that will appear in our error stream\n        raise RuntimeException(\"Hello exception\")\n```\n\n## 代码解析\n\n在代码开始需导入`IBurpExtender`，这是Burpsuite插件所必须的。之后需要一个类，继承从Burp导入的库`class BurpExtender(IBurpExtender)`。其中必须要有一个`registerExtenderCallbacks`函数用以注册插件相关信息。其参数是一个`IBurpExtenderCallbacks`类型的对象，被burp用来传递一组回调方法给扩展，扩展可以使用这些方法在burp中执行各种操作。根据需要调用此接口的方法，以控制Burp。\n\n```python\n# 通过回调方法,设置插件名称\ncallbacks.setExtensionName(\"Hello world extension\")\n```\n\n![img](BurpSuite-插件编写-Hello-World/3b8f2823-3301-41b6-a5a3-beecab473142.png)\n\n\n\n![img](BurpSuite-插件编写-Hello-World/91b7cc46-378d-4a21-991a-2ce14c74c393.png)\n\n\n\n\n\n```Python\n# 获取输出流(之后可以输出信息)\nstdout = PrintWriter(callbacks.getStdout(), True)\n# 获取错误流(之后可以输出错误信息)\nstderr = PrintWriter(callbacks.getStderr(), True)\n```\n\n获取输出/错误流\n\n```Python\n# 输出信息, 可在插件选项卡下Output处查看\nstdout.println(\"Hello output\")\n# 输出错误, 可在插件选项卡下Error处查看\nstderr.println(\"Hello errors\")\n```\n\n![img](BurpSuite-插件编写-Hello-World/485a95b8-f7ca-41cb-9f03-bbe255c5035b.png)\n\n```Python\n# 通过回调方法, 在Alert选项卡下输出一条信息\ncallbacks.issueAlert(\"Hello alerts\")\n```\n\n![img](BurpSuite-插件编写-Hello-World/b2a1010a-5b1d-43c7-b0ba-18e2158f531c.png)\n\n```python\n# 抛出错误, 可在Error选项卡查看\nraise RuntimeException(\"Hello exception\")\n```\n\n![img](BurpSuite-插件编写-Hello-World/5fde7e60-c364-4157-b1aa-aa6c5cc6d309.png)\n\n\n\n\n\n注：本教程所用例程均为Burpsuite官方例程：[详见](https://portswigger.net/burp/extender#SampleExtensions)\n\n","tags":["BurpSuite","Python"],"categories":["Python","BurpSuite 插件"]},{"title":"Hexo 插入本地图片","url":"/2019/08/31/Hexo-插入本地图片/","content":"\n\n\n# Hexo 插入本地图片\n\n把博客根目录`_config.yml` 中的`post_asset_folder`选项设置为`true`\n\n![1567265242045](Hexo-插入本地图片/1567265242045.png)\n\n之后安装插件`npm install hexo-asset-image --save`\n\n安装完成后新建文章，会生成一个与文章标题相同的文件夹，在需要引用时直接将图片复制到同名文件夹。\n\n之后用markdown语法引用即可。\n\n`![image](image.jpg)`\n\n<p><font size=5 color=red>这是网上的教程！！但。。</font></p>\n\n\n![1567265945811](Hexo-插入本地图片/1567265945811.png)\n\n审查元素后发现：\n\n![1567266125128](Hexo-插入本地图片/1567266125128.png)\n\n怪异的地址\n\n# 插件修改\n\n查看`hexo g`的输出\n\n![1567266217435](Hexo-插入本地图片/1567266217435.png)\n\n最后发现是插件的问题，去根目录下`node_modules\\hexo-asset-image`文件夹，调试\n\n![1567266563451](Hexo-插入本地图片/1567266563451.png)\n\n![1567266529454](Hexo-插入本地图片/1567266529454.png)\n\n发现它分割的`endPos`错误\n\n`http://yoursite.com/2019/08/31/BurpSuite-代理原理/--20--15`  ->> `.com`\n\n正确的应该是`2019/08/31/BurpSuite-代理原理/`\n\n修改代码为：\n\n![1567266762525](Hexo-插入本地图片/1567266762525.png)\n\n这次终于可以了\n\n![1567266950392](Hexo-插入本地图片/1567266950392.png)\n\n","tags":["Hexo"]},{"title":"BurpSuite 代理原理","url":"/2019/08/31/BurpSuite-代理原理/","content":"\n# Burp Suite 代理原理\n\n## HTTP 代理\n\nHTTP 正常请求\n\n![1567259709095](BurpSuite-代理原理/1567259709095.png)\n\n代理Burp Suite时，Burp Suite会监听8080端口，浏览器将流量(数据)发送到8080端口，被Burp suite接受。流量会通过Burp suite，之后再由Burp suite发送到服务器。响应时，同理。\n\n![1567259923506](BurpSuite-代理原理/1567259923506.png)\n\n## HTTPS 代理\n\nHTTPS 是什么：**HTTPS = HTTP + SSL**\n\n在Burp suite刚开始是无法抓HTTPS 的包的，需要安装一个证书。\n\n无Burp suiteHTTPS交互过程\n\n![1567261847238](BurpSuite-代理原理/1567261847238.png)\n\n有Burp Suite时，Burpsuite有两个证书，一个与浏览器通讯，一个与服务器通讯。\n\n![1567262141388](BurpSuite-代理原理/1567262141388.png)\n\n","tags":["BurpSuite"],"categories":["BurpSuite"]},{"title":"Hello World","url":"/2019/08/31/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]