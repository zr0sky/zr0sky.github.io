{"meta":{"title":"zr0sky","subtitle":null,"description":null,"author":"zr0sky","url":"https://blog.zr0sky.cn","root":"/"},"pages":[{"title":"标签","date":"2019-08-31T01:28:31.000Z","updated":"2019-10-18T11:17:07.549Z","comments":true,"path":"tags/index.html","permalink":"https://blog.zr0sky.cn/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2019-08-31T01:28:37.000Z","updated":"2019-10-18T10:59:07.943Z","comments":true,"path":"about/index.html","permalink":"https://blog.zr0sky.cn/about/index.html","excerpt":"","text":"一个苦逼的Web狗… Contact Me Github: @zr0sky Email: i@zr0sky.cn Wechat: @zr0sky的微信"},{"title":"分类","date":"2019-10-18T11:08:23.000Z","updated":"2019-10-18T11:16:37.512Z","comments":true,"path":"categories/index.html","permalink":"https://blog.zr0sky.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"BurpSuite 插件编写 - 创建选项卡","slug":"BurpSuite-插件编写-创建标签","date":"2019-09-05T07:49:02.000Z","updated":"2019-10-09T11:18:21.196Z","comments":true,"path":"2019/09/05/BurpSuite-插件编写-创建标签/","link":"","permalink":"https://blog.zr0sky.cn/2019/09/05/BurpSuite-插件编写-创建标签/","excerpt":"","text":"创建选项卡需要使用的库： ITab Java swing 库 ITab ITab只含有两个方法： getTabCaption 用于获取选项卡上的标题 def getTabCaption(self): # Get title of Tab return 'createTab' getUiComponent 用于获取选项卡中的组件（面板） def getUiComponent(self): # get component of tab return self.mainPanel swing Java 中的swing库，用来编写GUI界面。相关教程1，相关教程2 代码 # -*- coding: utf-8 -*- # Author: zr0sky (i@zr0sky.cn) # Blog: blog.zr0sky.cn # 导入相关库 from burp import IBurpExtender, ITab from javax.swing import JPanel, JButton, JTextArea class BurpExtender(IBurpExtender, ITab): def registerExtenderCallbacks(self, callbacks): self._cb = callbacks self._hp = callbacks.getHelpers() self._cb.setExtensionName('newTab') self.mainPanel = JPanel() # 创建一个面板，能容纳组件并将组件组合在一起 self.testTextArea = JTextArea() # 创建一个文本框 self.testTextArea.setLineWrap(True) # 设置文本框为自动换行 self.testBtn = JButton(\"Click me\", actionPerformed=self.onClick) # 创建一个按钮并绑定事件 self.mainPanel.add(self.testTextArea) # 将组件添加到面板中 self.mainPanel.add(self.testBtn) self._cb.customizeUiComponent(self.mainPanel) self._cb.addSuiteTab(self) def onClick(self, event): print '1111' def getTabCaption(self): # Get title of Tab return 'createTab' def getUiComponent(self): # get component of tab return self.mainPanel","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.zr0sky.cn/categories/Python/"},{"name":"BurpSuite 插件","slug":"Python/BurpSuite-插件","permalink":"https://blog.zr0sky.cn/categories/Python/BurpSuite-插件/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.zr0sky.cn/tags/Python/"},{"name":"BurpSuite","slug":"BurpSuite","permalink":"https://blog.zr0sky.cn/tags/BurpSuite/"}]},{"title":"BurpSuite 插件编写 - 事件监听","slug":"BurpSuite-插件编写-事件监听","date":"2019-09-03T13:36:26.000Z","updated":"2019-10-10T11:52:03.007Z","comments":true,"path":"2019/09/03/BurpSuite-插件编写-事件监听/","link":"","permalink":"https://blog.zr0sky.cn/2019/09/03/BurpSuite-插件编写-事件监听/","excerpt":"","text":"事件监听相关的库： IHttpListener IProxyListener IScannerListener IExtensionStateListener IScopeChangeListener 在使用相应的库时，需要让继承相应的类,如需要IHttpListener时： class BurpExtender(IBurpExtender, IHttpListener) IHttpListener HTTP的监听器拓展库，监听所有Burp发出的请求和响应。 可调用IBurpExtenderCallbacks.registerHttpListener() 来注册HTTP监听器。通过processHttpMessage方法来处理HTTP请求或响应。 void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) toolFlag：发出请求的工具标志, 如: TOOL_PROXY 标志就代表数据是从Proxy发出 messageIsRequest：是否为请求包 messageInfo：要处理的请求/响应的详细信息。扩展可以调用此对象上的setter方法来更新当前消息，从而修改burp的行为。对象所包含的方法详见 from burp import IBurpExtender from burp import IHttpListener from java.io import PrintWriter class BurpExtender(IBurpExtender, IHttpListener): # # implement IBurpExtender # def registerExtenderCallbacks(self, callbacks): self._callbacks = callbacks callbacks.setExtensionName(\"Event listeners\") self._stdout = PrintWriter(callbacks.getStdout(), True) # 注册HTTP监听器 callbacks.registerHttpListener(self) # # implement IHttpListener # def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo): # 将信息输出到 输出流中去 self._stdout.println( (\"HTTP request to \" if messageIsRequest else \"HTTP response from \") + messageInfo.getHttpService().toString() + \" [\" + self._callbacks.getToolName(toolFlag) + \"]\") IProxyListener 注册Proxy侦听器，只监听Proxy工具发出的的请求和响应。调用IBurpExtenderCallbacks.registerProxyListener()注册Proxy侦听器，通过processProxyMessage方法来处理请求或响应 from burp import IBurpExtender from burp import IProxyListener from java.io import PrintWriter class BurpExtender(IBurpExtender, IProxyListener): # # implement IBurpExtender # def registerExtenderCallbacks(self, callbacks): self._callbacks = callbacks callbacks.setExtensionName(\"Event listeners\") self._stdout = PrintWriter(callbacks.getStdout(), True) # 注册HTTP监听器 callbacks.registerProxyListener(self) # # implement IProxyListener # def processProxyMessage(self, messageIsRequest, message): self._stdout.println( (\"Proxy request to \" if messageIsRequest else \"Proxy response from \") + message.getMessageInfo().getHttpService().toString()) IScannerListener 注册Scanner 侦听器，只监听Scanner 工具发出的issues。调用IBurpExtenderCallbacks.registerScannerListener()注册Scanner侦听器，通过newScanIssue方法来处理，其含有一个参数IScanIssue类型的issue，具体详见 from burp import IBurpExtender from burp import IScannerListener from java.io import PrintWriter class BurpExtender(IBurpExtender, IScannerListener): # # implement IBurpExtender # def registerExtenderCallbacks(self, callbacks): # keep a reference to our callbacks object self._callbacks = callbacks # set our extension name callbacks.setExtensionName(\"Event listeners\") # obtain our output stream self._stdout = PrintWriter(callbacks.getStdout(), True) # register ourselves as a Scanner listener callbacks.registerScannerListener(self) def newScanIssue(self, issue): self._stdout.println(\"New scan issue: \" + issue.getIssueName()) IExtensionStateListener 注册扩展状态侦听器。将通知侦听器扩展状态的更改。调用IBurpExtenderCallbacks.registerExtensionStateListener()注册。extensionUnloaded()方法来处理。无参数 注意：任何启动后台线程或打开系统资源（如文件或数据库连接）的扩展都应该注册一个侦听器，并在卸载扩展时终止线程/关闭资源。关闭Burp时也会卸载扩展 def extensionUnloaded(self): self._stdout.println(\"Extension was unloaded\") IScopeChangeListener 调用IBurpExtenderCallbacks.registerScopeChangeListener()注册scope更改侦听器。每当Burp的scope内的目标范围发生更改时，都会通知侦听器。使用scopeChanged()方法来处理，无参数 # -*- coding: utf-8 -*- # Author: zr0sky (i@zr0sky.cn) # Blog: blog.zr0sky.cn from burp import IBurpExtender from burp import IScopeChangeListener from java.io import PrintWriter from java.lang import RuntimeException class BurpExtender(IBurpExtender, IScopeChangeListener): def registerExtenderCallbacks(self, callbacks): callbacks.setExtensionName(\"test\") callbacks.registerScopeChangeListener(self) def scopeChanged(self): print \"Scope is Changed !\" 完整代码： # -*- coding: utf-8 -*- # Author: zr0sky (i@zr0sky.cn) # Blog: blog.zr0sky.cn from burp import IBurpExtender from burp import IHttpListener from burp import IProxyListener from burp import IScannerListener from burp import IScopeChangeListener from burp import IExtensionStateListener from java.io import PrintWriter class BurpExtender(IBurpExtender, IHttpListener, IProxyListener, IScannerListener, IScopeChangeListener, IExtensionStateListener): def registerExtenderCallbacks(self, callbacks): self._callbacks = callbacks callbacks.setExtensionName(\"Event listeners\") self._stdout = PrintWriter(callbacks.getStdout(), True) callbacks.registerHttpListener(self) callbacks.registerProxyListener(self) callbacks.registerScannerListener(self) callbacks.registerExtensionStateListener(self) callbacks.registerScopeChangeListener(self) def processHttpMessage(self, toolFlag, messageIsRequest, messageInfo): self._stdout.println( (\"HTTP request to \" if messageIsRequest else \"HTTP response from \") + messageInfo.getHttpService().toString() + \" [\" + self._callbacks.getToolName(toolFlag) + \"]\") def processProxyMessage(self, messageIsRequest, message): self._stdout.println( (\"Proxy request to \" if messageIsRequest else \"Proxy response from \") + message.getMessageInfo().getHttpService().toString()) def newScanIssue(self, issue): self._stdout.println(\"New scan issue: \" + issue.getIssueName()) def extensionUnloaded(self): self._stdout.println(\"Extension was unloaded\") def scopeChanged(self): print \"Scope is Changed !\"","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.zr0sky.cn/categories/Python/"},{"name":"BurpSuite 插件","slug":"Python/BurpSuite-插件","permalink":"https://blog.zr0sky.cn/categories/Python/BurpSuite-插件/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.zr0sky.cn/tags/Python/"},{"name":"BurpSuite","slug":"BurpSuite","permalink":"https://blog.zr0sky.cn/tags/BurpSuite/"}]},{"title":"BurpSuite 插件编写 - Hello World","slug":"BurpSuite-插件编写-Hello-World","date":"2019-09-03T04:45:59.000Z","updated":"2019-10-10T11:20:25.478Z","comments":true,"path":"2019/09/03/BurpSuite-插件编写-Hello-World/","link":"","permalink":"https://blog.zr0sky.cn/2019/09/03/BurpSuite-插件编写-Hello-World/","excerpt":"","text":"0x00 前言 BurpSuite是渗透过程中的一大神器，几乎必不可少。而必要的插件可以使我们事半功倍。虽然Burp中已经有很多优秀的插件供我们使用，但有些情况下我们可以根据自己的需要定制自己的插件。 前提准备 Burp Suite 这个就不说了 Jython Jython 是Burp 支持Python 的必要插件。下载官网 设置Jython路径 Python2 Jython 目前只支持Python2 0x01 插件编写 插件API的文档地址：Generated Documentation 里面有详细的介绍 常用的库 from burp import IBurpExtender # Burp 插件入口， 必须 在代码开始需导入IBurpExtender，这是Burpsuite插件所必须的。之后需要一个继承IBurpExtender的类class BurpExtender(IBurpExtender)。 要有定义一个registerExtenderCallbacks函数用以注册插件相关信息。其参数是一个IBurpExtenderCallbacks类型的对象，被burp用来传递一组回调方法给扩展，扩展可以使用这些方法在burp中执行各种操作。根据需要调用此接口的方法，以控制Burp。如下： from burp import IBurpExtender class BurpExtender(IBurpExtender): def registerExtenderCallbacks(self, callbacks): # 会在刚载入模块时执行( 刚安装模块时，或重启Burp后 ) Hello World # -*- coding: utf-8 -*- # Author: zr0sky (i@zr0sky.cn) # Blog: blog.zr0sky.cn from burp import IBurpExtender from java.io import PrintWriter from java.lang import RuntimeException class BurpExtender(IBurpExtender): def registerExtenderCallbacks(self, callbacks): # 设置插件的名称 callbacks.setExtensionName(\"Hello world extension\") # 输出数据 print \"test print\" print直接将内容输出到了Output框里。 在官方是使用以下代码来进行输出的，原地址：Hello World 需要导入from java.io import PrintWriter # obtain our output and error streams stdout = PrintWriter(callbacks.getStdout(), True) stderr = PrintWriter(callbacks.getStderr(), True) # write a message to our output stream stdout.println(\"Hello output\") # write a message to our error stream stderr.println(\"Hello errors\") 其用来发出警告的函数 callbacks.issueAlert(\"Hello alerts\") 抛出错误, 可在Error选项卡查看，需要导入：from java.lang import RuntimeException raise RuntimeException(\"Hello exception\") 官方Hello World： from burp import IBurpExtender from java.io import PrintWriter from java.lang import RuntimeException class BurpExtender(IBurpExtender): # # implement IBurpExtender # def registerExtenderCallbacks(self, callbacks): # set our extension name callbacks.setExtensionName(\"Hello world extension\") # obtain our output and error streams stdout = PrintWriter(callbacks.getStdout(), True) stderr = PrintWriter(callbacks.getStderr(), True) # write a message to our output stream stdout.println(\"Hello output\") # write a message to our error stream stderr.println(\"Hello errors\") # write a message to the Burp alerts tab callbacks.issueAlert(\"Hello alerts\") # throw an exception that will appear in our error stream raise RuntimeException(\"Hello exception\") 注：本教程所用例程均为Burpsuite官方例程：详见","categories":[{"name":"Python","slug":"Python","permalink":"https://blog.zr0sky.cn/categories/Python/"},{"name":"BurpSuite 插件","slug":"Python/BurpSuite-插件","permalink":"https://blog.zr0sky.cn/categories/Python/BurpSuite-插件/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://blog.zr0sky.cn/tags/Python/"},{"name":"BurpSuite","slug":"BurpSuite","permalink":"https://blog.zr0sky.cn/tags/BurpSuite/"}]},{"title":"Hexo 插入本地图片","slug":"Hexo-插入本地图片","date":"2019-08-31T15:22:14.000Z","updated":"2019-10-09T11:19:40.903Z","comments":true,"path":"2019/08/31/Hexo-插入本地图片/","link":"","permalink":"https://blog.zr0sky.cn/2019/08/31/Hexo-插入本地图片/","excerpt":"","text":"把博客根目录_config.yml 中的post_asset_folder选项设置为true 之后安装插件npm install hexo-asset-image --save 安装完成后新建文章，会生成一个与文章标题相同的文件夹，在需要引用时直接将图片复制到同名文件夹。 之后用markdown语法引用即可。 ![image](image.jpg) 这是网上的教程！！但。。 审查元素后发现： 怪异的地址 插件修改 查看hexo g的输出 最后发现是插件的问题，去根目录下node_modules\\hexo-asset-image文件夹，调试 发现它分割的endPos错误 http://yoursite.com/2019/08/31/BurpSuite-代理原理/--20--15 -&gt;&gt; .com 正确的应该是2019/08/31/BurpSuite-代理原理/ 修改代码为： 这次终于可以了","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.zr0sky.cn/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-08-31T01:16:10.784Z","updated":"2019-08-31T01:16:10.784Z","comments":true,"path":"2019/08/31/hello-world/","link":"","permalink":"https://blog.zr0sky.cn/2019/08/31/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post $ hexo new \"My New Post\" More info: Writing Run server $ hexo server More info: Server Generate static files $ hexo generate More info: Generating Deploy to remote sites $ hexo deploy More info: Deployment","categories":[],"tags":[]}]}