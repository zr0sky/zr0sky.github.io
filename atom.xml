<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zr0sky</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.zr0sky.com/"/>
  <updated>2019-10-09T11:18:21.196Z</updated>
  <id>https://blog.zr0sky.com/</id>
  
  <author>
    <name>zr0sky</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BurpSuite 插件编写 - 创建选项卡</title>
    <link href="https://blog.zr0sky.com/2019/09/05/BurpSuite-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99-%E5%88%9B%E5%BB%BA%E6%A0%87%E7%AD%BE/"/>
    <id>https://blog.zr0sky.com/2019/09/05/BurpSuite-插件编写-创建标签/</id>
    <published>2019-09-05T07:49:02.000Z</published>
    <updated>2019-10-09T11:18:21.196Z</updated>
    
    <content type="html"><![CDATA[<p>创建选项卡需要使用的库：</p><ul><li>ITab</li><li>Java swing 库</li></ul><h1 id="itab"><a class="markdownIt-Anchor" href="#itab"></a> ITab</h1><p>ITab只含有两个方法：</p><h2 id="gettabcaption"><a class="markdownIt-Anchor" href="#gettabcaption"></a> getTabCaption</h2><p>用于获取选项卡上的标题</p><p><img src="/2019/09/05/BurpSuite-插件编写-创建标签/1567670294670.png" alt="1567670294670"></p><pre class="highlight"><code class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTabCaption</span><span class="hljs-params">(self)</span>:</span>    <span class="hljs-comment"># Get title of Tab</span>    <span class="hljs-keyword">return</span> <span class="hljs-string">'createTab'</span></code></pre><h2 id="getuicomponent"><a class="markdownIt-Anchor" href="#getuicomponent"></a> getUiComponent</h2><p>用于获取选项卡中的组件（面板）</p><pre class="highlight"><code class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getUiComponent</span><span class="hljs-params">(self)</span>:</span>    <span class="hljs-comment"># get component of tab</span>    <span class="hljs-keyword">return</span> self.mainPanel</code></pre><h1 id="swing"><a class="markdownIt-Anchor" href="#swing"></a> swing</h1><p>Java 中的swing库，用来编写GUI界面。<a href="https://www.runoob.com/w3cnote/java-swing-demo-intro.html" target="_blank" rel="noopener">相关教程1</a>，<a href="http://c.biancheng.net/swing/" target="_blank" rel="noopener">相关教程2</a></p><h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1><pre class="highlight"><code class="python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># Author: zr0sky (i@zr0sky.cn)</span><span class="hljs-comment"># Blog: blog.zr0sky.cn</span><span class="hljs-comment"># 导入相关库</span><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender, ITab<span class="hljs-keyword">from</span> javax.swing <span class="hljs-keyword">import</span> JPanel, JButton, JTextArea<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender, ITab)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>                self._cb = callbacks        self._hp = callbacks.getHelpers()        self._cb.setExtensionName(<span class="hljs-string">'newTab'</span>)        self.mainPanel = JPanel() <span class="hljs-comment"># 创建一个面板，能容纳组件并将组件组合在一起</span>        self.testTextArea = JTextArea() <span class="hljs-comment"># 创建一个文本框</span>        self.testTextArea.setLineWrap(<span class="hljs-literal">True</span>) <span class="hljs-comment"># 设置文本框为自动换行</span>        self.testBtn = JButton(<span class="hljs-string">"Click me"</span>, actionPerformed=self.onClick)  <span class="hljs-comment"># 创建一个按钮并绑定事件</span>        self.mainPanel.add(self.testTextArea)    <span class="hljs-comment"># 将组件添加到面板中</span>        self.mainPanel.add(self.testBtn)        self._cb.customizeUiComponent(self.mainPanel)        self._cb.addSuiteTab(self)            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">onClick</span><span class="hljs-params">(self, event)</span>:</span>        <span class="hljs-keyword">print</span> <span class="hljs-string">'1111'</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getTabCaption</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-comment"># Get title of Tab</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">'createTab'</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getUiComponent</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-comment"># get component of tab</span>        <span class="hljs-keyword">return</span> self.mainPanel</code></pre><p><img src="/2019/09/05/BurpSuite-插件编写-创建标签/1567682752092.png" alt="1567682752092"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建选项卡需要使用的库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ITab&lt;/li&gt;
&lt;li&gt;Java swing 库&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;itab&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#itab&quot;&gt;&lt;/a&gt; ITab&lt;/h1&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.zr0sky.com/categories/Python/"/>
    
      <category term="BurpSuite 插件" scheme="https://blog.zr0sky.com/categories/Python/BurpSuite-%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="Python" scheme="https://blog.zr0sky.com/tags/Python/"/>
    
      <category term="BurpSuite" scheme="https://blog.zr0sky.com/tags/BurpSuite/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite 插件编写 - 事件监听</title>
    <link href="https://blog.zr0sky.com/2019/09/03/BurpSuite-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    <id>https://blog.zr0sky.com/2019/09/03/BurpSuite-插件编写-事件监听/</id>
    <published>2019-09-03T13:36:26.000Z</published>
    <updated>2019-10-10T11:52:03.007Z</updated>
    
    <content type="html"><![CDATA[<p>事件监听相关的库：</p><ul><li>IHttpListener</li><li>IProxyListener</li><li>IScannerListener</li><li>IExtensionStateListener</li><li>IScopeChangeListener</li></ul><p>在使用相应的库时，需要让继承相应的类,如需要<code>IHttpListener</code>时：</p><p><code>class BurpExtender(IBurpExtender, IHttpListener)</code></p><h2 id="ihttplistener"><a class="markdownIt-Anchor" href="#ihttplistener"></a> IHttpListener</h2><p>HTTP的监听器拓展库，<strong>监听所有Burp发出的请求和响应</strong>。</p><p>可调用<code>IBurpExtenderCallbacks.registerHttpListener()</code> 来注册HTTP监听器。通过<code>processHttpMessage</code>方法来处理HTTP请求或响应。</p><pre class="highlight"><code class="python">void processHttpMessage(int toolFlag,                      boolean messageIsRequest,                      IHttpRequestResponse messageInfo)</code></pre><p><code>toolFlag</code>：发出请求的工具标志, 如: TOOL_PROXY 标志就代表数据是从Proxy发出</p><p><img src="/2019/09/03/BurpSuite-插件编写-事件监听/1567518683382.png" alt="1567518683382"></p><p><code>messageIsRequest</code>：是否为请求包</p><p><code>messageInfo</code>：要处理的请求/响应的详细信息。扩展可以调用此对象上的setter方法来更新当前消息，从而修改burp的行为。对象所包含的方法<a href="https://portswigger.net/burp/extender/api/burp/IHttpRequestResponse.html" target="_blank" rel="noopener">详见</a></p><pre class="highlight"><code class="python"><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IHttpListener<span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender, IHttpListener)</span>:</span>        <span class="hljs-comment">#</span>    <span class="hljs-comment"># implement IBurpExtender</span>    <span class="hljs-comment">#</span>        <span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        self._callbacks = callbacks                callbacks.setExtensionName(<span class="hljs-string">"Event listeners"</span>)                self._stdout = PrintWriter(callbacks.getStdout(), <span class="hljs-literal">True</span>)        <span class="hljs-comment"># 注册HTTP监听器</span>        callbacks.registerHttpListener(self)        <span class="hljs-comment">#</span>    <span class="hljs-comment"># implement IHttpListener</span>    <span class="hljs-comment">#</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">processHttpMessage</span><span class="hljs-params">(self, toolFlag, messageIsRequest, messageInfo)</span>:</span>        <span class="hljs-comment"># 将信息输出到 输出流中去</span>        self._stdout.println(                (<span class="hljs-string">"HTTP request to "</span> <span class="hljs-keyword">if</span> messageIsRequest <span class="hljs-keyword">else</span> <span class="hljs-string">"HTTP response from "</span>) +                messageInfo.getHttpService().toString() +                <span class="hljs-string">" ["</span> + self._callbacks.getToolName(toolFlag) + <span class="hljs-string">"]"</span>)</code></pre><h2 id="iproxylistener"><a class="markdownIt-Anchor" href="#iproxylistener"></a> IProxyListener</h2><p>注册Proxy侦听器，只监听Proxy工具发出的的请求和响应。调用<code>IBurpExtenderCallbacks.registerProxyListener()</code>注册Proxy侦听器，通过<code>processProxyMessage</code>方法来处理请求或响应</p><pre class="highlight"><code class="python"><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IProxyListener<span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender, IProxyListener)</span>:</span>        <span class="hljs-comment">#</span>    <span class="hljs-comment"># implement IBurpExtender</span>    <span class="hljs-comment">#</span>        <span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        self._callbacks = callbacks                callbacks.setExtensionName(<span class="hljs-string">"Event listeners"</span>)                self._stdout = PrintWriter(callbacks.getStdout(), <span class="hljs-literal">True</span>)        <span class="hljs-comment"># 注册HTTP监听器</span>        callbacks.registerProxyListener(self)        <span class="hljs-comment">#</span>    <span class="hljs-comment"># implement IProxyListener</span>    <span class="hljs-comment">#</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">processProxyMessage</span><span class="hljs-params">(self, messageIsRequest, message)</span>:</span>        self._stdout.println(                (<span class="hljs-string">"Proxy request to "</span> <span class="hljs-keyword">if</span> messageIsRequest <span class="hljs-keyword">else</span> <span class="hljs-string">"Proxy response from "</span>) +                message.getMessageInfo().getHttpService().toString())</code></pre><h2 id="iscannerlistener"><a class="markdownIt-Anchor" href="#iscannerlistener"></a> IScannerListener</h2><p>注册Scanner 侦听器，只监听Scanner 工具发出的issues。调用<code>IBurpExtenderCallbacks.registerScannerListener()</code>注册Scanner侦听器，通过<code>newScanIssue</code>方法来处理，其含有一个参数<code>IScanIssue</code>类型的<code>issue</code>，<a href="https://portswigger.net/burp/extender/api/burp/IScanIssue.html" target="_blank" rel="noopener">具体详见</a></p><pre class="highlight"><code class="python"><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IScannerListener<span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender, IScannerListener)</span>:</span>    <span class="hljs-comment">#</span>    <span class="hljs-comment"># implement IBurpExtender</span>    <span class="hljs-comment">#</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        <span class="hljs-comment"># keep a reference to our callbacks object</span>        self._callbacks = callbacks                <span class="hljs-comment"># set our extension name</span>        callbacks.setExtensionName(<span class="hljs-string">"Event listeners"</span>)                <span class="hljs-comment"># obtain our output stream</span>        self._stdout = PrintWriter(callbacks.getStdout(), <span class="hljs-literal">True</span>)        <span class="hljs-comment"># register ourselves as a Scanner listener</span>        callbacks.registerScannerListener(self)            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">newScanIssue</span><span class="hljs-params">(self, issue)</span>:</span>        self._stdout.println(<span class="hljs-string">"New scan issue: "</span> + issue.getIssueName())</code></pre><h2 id="iextensionstatelistener"><a class="markdownIt-Anchor" href="#iextensionstatelistener"></a> IExtensionStateListener</h2><p>注册扩展状态侦听器。将通知侦听器扩展状态的更改。调用<code>IBurpExtenderCallbacks.registerExtensionStateListener()</code>注册。<code>extensionUnloaded()</code>方法来处理。<strong>无参数</strong></p><p><strong>注意</strong>：任何启动后台线程或打开系统资源（如文件或数据库连接）的扩展都应该注册一个侦听器，并在卸载扩展时终止线程/关闭资源。<strong>关闭Burp时也会卸载扩展</strong></p><pre class="highlight"><code class="python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extensionUnloaded</span><span class="hljs-params">(self)</span>:</span>    self._stdout.println(<span class="hljs-string">"Extension was unloaded"</span>)</code></pre><h2 id="iscopechangelistener"><a class="markdownIt-Anchor" href="#iscopechangelistener"></a> IScopeChangeListener</h2><p>调用<code>IBurpExtenderCallbacks.registerScopeChangeListener()</code>注册scope更改侦听器。每当Burp的scope内的目标范围发生更改时，都会通知侦听器。使用<code>scopeChanged()</code>方法来处理，<strong>无参数</strong></p><pre class="highlight"><code class="python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># Author: zr0sky (i@zr0sky.cn)</span><span class="hljs-comment"># Blog: blog.zr0sky.cn</span><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IScopeChangeListener<span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<span class="hljs-keyword">from</span> java.lang <span class="hljs-keyword">import</span> RuntimeException<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender, IScopeChangeListener)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        callbacks.setExtensionName(<span class="hljs-string">"test"</span>)        callbacks.registerScopeChangeListener(self)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scopeChanged</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">print</span> <span class="hljs-string">"Scope is Changed !"</span></code></pre><p><img src="/2019/09/03/BurpSuite-插件编写-事件监听/1570707649775.png" alt="1570707649775"></p><h2 id="完整代码"><a class="markdownIt-Anchor" href="#完整代码"></a> 完整代码：</h2><pre class="highlight"><code class="python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># Author: zr0sky (i@zr0sky.cn)</span><span class="hljs-comment"># Blog: blog.zr0sky.cn</span><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IHttpListener<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IProxyListener<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IScannerListener<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IScopeChangeListener<span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IExtensionStateListener<span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender, IHttpListener, IProxyListener, IScannerListener, IScopeChangeListener, IExtensionStateListener)</span>:</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        self._callbacks = callbacks                callbacks.setExtensionName(<span class="hljs-string">"Event listeners"</span>)                self._stdout = PrintWriter(callbacks.getStdout(), <span class="hljs-literal">True</span>)        callbacks.registerHttpListener(self)        callbacks.registerProxyListener(self)        callbacks.registerScannerListener(self)        callbacks.registerExtensionStateListener(self)        callbacks.registerScopeChangeListener(self)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">processHttpMessage</span><span class="hljs-params">(self, toolFlag, messageIsRequest, messageInfo)</span>:</span>        self._stdout.println(                (<span class="hljs-string">"HTTP request to "</span> <span class="hljs-keyword">if</span> messageIsRequest <span class="hljs-keyword">else</span> <span class="hljs-string">"HTTP response from "</span>) +                messageInfo.getHttpService().toString() +                <span class="hljs-string">" ["</span> + self._callbacks.getToolName(toolFlag) + <span class="hljs-string">"]"</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">processProxyMessage</span><span class="hljs-params">(self, messageIsRequest, message)</span>:</span>        self._stdout.println(                (<span class="hljs-string">"Proxy request to "</span> <span class="hljs-keyword">if</span> messageIsRequest <span class="hljs-keyword">else</span> <span class="hljs-string">"Proxy response from "</span>) +                message.getMessageInfo().getHttpService().toString())    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">newScanIssue</span><span class="hljs-params">(self, issue)</span>:</span>        self._stdout.println(<span class="hljs-string">"New scan issue: "</span> + issue.getIssueName())          <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extensionUnloaded</span><span class="hljs-params">(self)</span>:</span>        self._stdout.println(<span class="hljs-string">"Extension was unloaded"</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">scopeChanged</span><span class="hljs-params">(self)</span>:</span>        <span class="hljs-keyword">print</span> <span class="hljs-string">"Scope is Changed !"</span></code></pre><p><img src="/2019/09/03/BurpSuite-插件编写-事件监听/1570708232532.png" alt="1570708232532"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;事件监听相关的库：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IHttpListener&lt;/li&gt;
&lt;li&gt;IProxyListener&lt;/li&gt;
&lt;li&gt;IScannerListener&lt;/li&gt;
&lt;li&gt;IExtensionStateListener&lt;/li&gt;
&lt;li&gt;IScopeCh
      
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.zr0sky.com/categories/Python/"/>
    
      <category term="BurpSuite 插件" scheme="https://blog.zr0sky.com/categories/Python/BurpSuite-%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="Python" scheme="https://blog.zr0sky.com/tags/Python/"/>
    
      <category term="BurpSuite" scheme="https://blog.zr0sky.com/tags/BurpSuite/"/>
    
  </entry>
  
  <entry>
    <title>BurpSuite 插件编写 - Hello World</title>
    <link href="https://blog.zr0sky.com/2019/09/03/BurpSuite-%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99-Hello-World/"/>
    <id>https://blog.zr0sky.com/2019/09/03/BurpSuite-插件编写-Hello-World/</id>
    <published>2019-09-03T04:45:59.000Z</published>
    <updated>2019-10-10T11:20:25.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a class="markdownIt-Anchor" href="#0x00-前言"></a> 0x00 前言</h1><p>BurpSuite是渗透过程中的一大神器，几乎必不可少。而必要的插件可以使我们事半功倍。虽然Burp中已经有很多优秀的插件供我们使用，但有些情况下我们可以根据自己的需要定制自己的插件。</p><h2 id="前提准备"><a class="markdownIt-Anchor" href="#前提准备"></a> 前提准备</h2><h3 id="burp-suite"><a class="markdownIt-Anchor" href="#burp-suite"></a> Burp Suite</h3><p>这个就不说了</p><h3 id="jython"><a class="markdownIt-Anchor" href="#jython"></a> Jython</h3><p>Jython 是Burp 支持Python 的必要插件。<a href="https://www.jython.org/" target="_blank" rel="noopener">下载官网</a></p><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/1567486883062.png" alt="1567486883062"></p><p>设置Jython路径</p><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/1567486935814.png" alt="1567486935814"></p><h3 id="python2"><a class="markdownIt-Anchor" href="#python2"></a> Python2</h3><p>Jython 目前只支持Python2</p><h1 id="0x01-插件编写"><a class="markdownIt-Anchor" href="#0x01-插件编写"></a> 0x01 插件编写</h1><p>插件API的文档地址：<a href="https://portswigger.net/burp/extender/api/index.html" target="_blank" rel="noopener">Generated Documentation</a></p><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/1567487134501.png" alt="1567487134501"></p><p>里面有详细的介绍</p><h2 id="常用的库"><a class="markdownIt-Anchor" href="#常用的库"></a> 常用的库</h2><pre class="highlight"><code class="Python"><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender  <span class="hljs-comment"># Burp 插件入口， 必须</span></code></pre><p>在代码开始需导入<code>IBurpExtender</code>，这是Burpsuite插件所必须的。之后需要一个继承<code>IBurpExtender</code>的类<code>class BurpExtender(IBurpExtender)</code>。</p><p>要有定义一个<code>registerExtenderCallbacks</code>函数用以注册插件相关信息。其参数是一个<code>IBurpExtenderCallbacks</code>类型的对象，被burp用来传递一组回调方法给扩展，扩展可以使用这些方法在burp中执行各种操作。根据需要调用此接口的方法，以控制Burp。如下：</p><pre class="highlight"><code class="python"><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender)</span>:</span>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        <span class="hljs-comment"># 会在刚载入模块时执行( 刚安装模块时，或重启Burp后 )</span></code></pre><h2 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> Hello World</h2><pre class="highlight"><code class="python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># Author: zr0sky (i@zr0sky.cn)</span><span class="hljs-comment"># Blog: blog.zr0sky.cn</span><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<span class="hljs-keyword">from</span> java.lang <span class="hljs-keyword">import</span> RuntimeException<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender)</span>:</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        <span class="hljs-comment"># 设置插件的名称</span>        callbacks.setExtensionName(<span class="hljs-string">"Hello world extension"</span>)        <span class="hljs-comment"># 输出数据</span>        <span class="hljs-keyword">print</span> <span class="hljs-string">"test print"</span>        </code></pre><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/3b8f2823-3301-41b6-a5a3-beecab473142.png" alt="img"></p><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/91b7cc46-378d-4a21-991a-2ce14c74c393.png" alt="img"></p><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/1570703255179.png" alt="1570703255179"></p><p><code>print</code>直接将内容输出到了Output框里。</p><p>在官方是使用以下代码来进行输出的，原地址：<a href="https://github.com/PortSwigger/example-hello-world/blob/master/python/HelloWorld.py" target="_blank" rel="noopener">Hello World</a></p><p>需要导入<code>from java.io import PrintWriter</code></p><pre class="highlight"><code class="python"><span class="hljs-comment"># obtain our output and error streams</span>stdout = PrintWriter(callbacks.getStdout(), <span class="hljs-literal">True</span>)stderr = PrintWriter(callbacks.getStderr(), <span class="hljs-literal">True</span>)<span class="hljs-comment"># write a message to our output stream</span>stdout.println(<span class="hljs-string">"Hello output"</span>)<span class="hljs-comment"># write a message to our error stream</span>stderr.println(<span class="hljs-string">"Hello errors"</span>)</code></pre><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/485a95b8-f7ca-41cb-9f03-bbe255c5035b.png" alt="img"></p><p>其用来发出警告的函数</p><pre class="highlight"><code class="python">callbacks.issueAlert(<span class="hljs-string">"Hello alerts"</span>)</code></pre><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/b2a1010a-5b1d-43c7-b0ba-18e2158f531c.png" alt="img"></p><p>抛出错误, 可在Error选项卡查看，需要导入：<code>from java.lang import RuntimeException</code></p><pre class="highlight"><code class="python"><span class="hljs-keyword">raise</span> RuntimeException(<span class="hljs-string">"Hello exception"</span>)</code></pre><p><img src="/2019/09/03/BurpSuite-插件编写-Hello-World/5fde7e60-c364-4157-b1aa-aa6c5cc6d309.png" alt="img"></p><p>官方Hello World：</p><pre class="highlight"><code class="python"><span class="hljs-keyword">from</span> burp <span class="hljs-keyword">import</span> IBurpExtender<span class="hljs-keyword">from</span> java.io <span class="hljs-keyword">import</span> PrintWriter<span class="hljs-keyword">from</span> java.lang <span class="hljs-keyword">import</span> RuntimeException<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BurpExtender</span><span class="hljs-params">(IBurpExtender)</span>:</span>        <span class="hljs-comment">#</span>    <span class="hljs-comment"># implement IBurpExtender</span>    <span class="hljs-comment">#</span>        <span class="hljs-function"><span class="hljs-keyword">def</span><span class="hljs-title">registerExtenderCallbacks</span><span class="hljs-params">(self, callbacks)</span>:</span>        <span class="hljs-comment"># set our extension name</span>        callbacks.setExtensionName(<span class="hljs-string">"Hello world extension"</span>)                <span class="hljs-comment"># obtain our output and error streams</span>        stdout = PrintWriter(callbacks.getStdout(), <span class="hljs-literal">True</span>)        stderr = PrintWriter(callbacks.getStderr(), <span class="hljs-literal">True</span>)                <span class="hljs-comment"># write a message to our output stream</span>        stdout.println(<span class="hljs-string">"Hello output"</span>)                <span class="hljs-comment"># write a message to our error stream</span>        stderr.println(<span class="hljs-string">"Hello errors"</span>)                <span class="hljs-comment"># write a message to the Burp alerts tab</span>        callbacks.issueAlert(<span class="hljs-string">"Hello alerts"</span>)                <span class="hljs-comment"># throw an exception that will appear in our error stream</span>        <span class="hljs-keyword">raise</span> RuntimeException(<span class="hljs-string">"Hello exception"</span>)</code></pre><p>注：本教程所用例程均为Burpsuite官方例程：<a href="https://portswigger.net/burp/extender#SampleExtensions" target="_blank" rel="noopener">详见</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#0x00-前言&quot;&gt;&lt;/a&gt; 0x00 前言&lt;/h1&gt;
&lt;p&gt;BurpSuite是渗透过程中的一大神器，几乎必不可少。而必要的插件可以使我们事半功倍。虽然Burp中已经有很多优
      
    
    </summary>
    
    
      <category term="Python" scheme="https://blog.zr0sky.com/categories/Python/"/>
    
      <category term="BurpSuite 插件" scheme="https://blog.zr0sky.com/categories/Python/BurpSuite-%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="Python" scheme="https://blog.zr0sky.com/tags/Python/"/>
    
      <category term="BurpSuite" scheme="https://blog.zr0sky.com/tags/BurpSuite/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 插入本地图片</title>
    <link href="https://blog.zr0sky.com/2019/08/31/Hexo-%E6%8F%92%E5%85%A5%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87/"/>
    <id>https://blog.zr0sky.com/2019/08/31/Hexo-插入本地图片/</id>
    <published>2019-08-31T15:22:14.000Z</published>
    <updated>2019-10-09T11:19:40.903Z</updated>
    
    <content type="html"><![CDATA[<p>把博客根目录<code>_config.yml</code> 中的<code>post_asset_folder</code>选项设置为<code>true</code></p><p><img src="/2019/08/31/Hexo-插入本地图片/1567265242045.png" alt="1567265242045"></p><p>之后安装插件<code>npm install hexo-asset-image --save</code></p><p>安装完成后新建文章，会生成一个与文章标题相同的文件夹，在需要引用时直接将图片复制到同名文件夹。</p><p>之后用markdown语法引用即可。</p><p><code>![image](image.jpg)</code></p><p><font size="5" color="red">这是网上的教程！！但。。</font></p><p><img src="/2019/08/31/Hexo-插入本地图片/1567265945811.png" alt="1567265945811"></p><p>审查元素后发现：</p><p><img src="/2019/08/31/Hexo-插入本地图片/1567266125128.png" alt="1567266125128"></p><p>怪异的地址</p><h1 id="插件修改"><a class="markdownIt-Anchor" href="#插件修改"></a> 插件修改</h1><p>查看<code>hexo g</code>的输出</p><p><img src="/2019/08/31/Hexo-插入本地图片/1567266217435.png" alt="1567266217435"></p><p>最后发现是插件的问题，去根目录下<code>node_modules\hexo-asset-image</code>文件夹，调试</p><p><img src="/2019/08/31/Hexo-插入本地图片/1567266563451.png" alt="1567266563451"></p><p><img src="/2019/08/31/Hexo-插入本地图片/1567266529454.png" alt="1567266529454"></p><p>发现它分割的<code>endPos</code>错误</p><p><code>http://yoursite.com/2019/08/31/BurpSuite-代理原理/--20--15</code>  -&gt;&gt; <code>.com</code></p><p>正确的应该是<code>2019/08/31/BurpSuite-代理原理/</code></p><p>修改代码为：</p><p><img src="/2019/08/31/Hexo-插入本地图片/1567266762525.png" alt="1567266762525"></p><p>这次终于可以了</p><p><img src="/2019/08/31/Hexo-插入本地图片/1567266950392.png" alt="1567266950392"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把博客根目录&lt;code&gt;_config.yml&lt;/code&gt; 中的&lt;code&gt;post_asset_folder&lt;/code&gt;选项设置为&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/08/31/Hexo-插入本地图片/1567265242
      
    
    </summary>
    
    
    
      <category term="Hexo" scheme="https://blog.zr0sky.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.zr0sky.com/2019/08/31/hello-world/"/>
    <id>https://blog.zr0sky.com/2019/08/31/hello-world/</id>
    <published>2019-08-31T01:16:10.784Z</published>
    <updated>2019-08-31T01:16:10.784Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="highlight"><code class="bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="highlight"><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="highlight"><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="highlight"><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
